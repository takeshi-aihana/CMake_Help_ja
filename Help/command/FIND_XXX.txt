このコマンドの短縮形は次のとおり：

.. parsed-literal::

   |FIND_XXX| (<VAR> name1 [path1 path2 ...])

このコマンドの一般形は次のとおり：

.. parsed-literal::

   |FIND_XXX| (
             <VAR>
             name | |NAMES|
             [HINTS [path | ENV var]... ]
             [PATHS [path | ENV var]... ]
             [REGISTRY_VIEW (64|32|64_32|32_64|HOST|TARGET|BOTH)]
             [PATH_SUFFIXES suffix1 [suffix2 ...]]
             [VALIDATOR function]
             [DOC "cache documentation string"]
             [NO_CACHE]
             [REQUIRED]
             [NO_DEFAULT_PATH]
             [NO_PACKAGE_ROOT_PATH]
             [NO_CMAKE_PATH]
             [NO_CMAKE_ENVIRONMENT_PATH]
             [NO_SYSTEM_ENVIRONMENT_PATH]
             [NO_CMAKE_SYSTEM_PATH]
             [NO_CMAKE_INSTALL_PREFIX]
             [CMAKE_FIND_ROOT_PATH_BOTH |
              ONLY_CMAKE_FIND_ROOT_PATH |
              NO_CMAKE_FIND_ROOT_PATH]
            )

このコマンドは、指定した「|SEARCH_XXX_DESC|」を探す際に使用します。
このコマンドの結果を格納するため、 ``<VAR>`` に指定したキャッシュ変数、または ``NO_CACHE`` を指定した場合はキャッシュされない通常の変数を作成します。
「|SEARCH_XXX|」が見つかった場合、結果はその変数に格納され、その変数がクリアされない限り、ファイルを探す処理は行いません。
何も見つからなかった場合、結果は ``<VAR>-NOTFOUND`` になります。

指定できるオプションは次のとおりです：

``NAMES``
  「|SEARCH_XXX|」を1つ以上指定する。

  なお、このオプションを使ってファイル名を指定する際は、システムが提供しているパッケージのファイルよりも前にローカルで作成したパッケージのファイルが見つかるように、（パッケージにバージョンが付いているかどうかに拘わらず、）まず最初にバージョンが付いていないパッケージ名やファイル名を指定することを推奨している。


``HINTS``, ``PATHS``
  デフォルトのディレクトリに加え、追加でファイルを探すディレクトリを指定する。
  ``ENV var`` というサブ・オプションは、実行するシステムの環境変数 ``var`` からディレクトリを取得する。

  .. versionchanged:: 3.24
    Windows 系のプラットフォームの場合は「:ref:`専用の構文 <Find Using Windows Registry>`」を使用して、Windows レジストリのクエリを対象ディレクトリの一部として含めることができるようになった。
    この仕様は、他のプラットフォームでは無視される。

``REGISTRY_VIEW``
  .. versionadded:: 3.24

  .. include:: FIND_XXX_REGISTRY_VIEW.txt

``PATH_SUFFIXES``
  ここで指定したキーワードを含むサブディレクトリを追加で確認する（たとえば ``include`` ディレクトリなど）。

``VALIDATOR``
  .. versionadded:: 3.25

  見つかったファイル毎に呼び出す :command:`function` を指定する（:command:`macro` は不可。指定した場合はエラーになる）。
  この関数には（関数名の他に）、関数からの返り値を格納する変数とファイルの絶対パスを引数として渡す。
  関数では、受け取った絶対パスが現在のスコープ ``PARENT_SCOPE`` では目的のファイルでなくファイルを探す処理を継続させる ``FALSE`` か、または受け取った絶対パスが目的のファイルでありファイルを探す処理を終了させる ``TRUE`` のいずれかを返り値の変数に格納する。
  なお、この関数に入ると自動的に返り値の変数に ``TRUE`` がセットされるので、たとえば関数のコードは次の様になる：

  .. parsed-literal::

     function(my_check validator_result_var item)
       if(NOT item MATCHES ...)
         set(${validator_result_var} FALSE PARENT_SCOPE)
       endif()
     endfunction()

     |FIND_XXX| (result NAMES ... VALIDATOR my_check)

  キャッシュ変数にキャッシュされた結果を使用する場合は、ファイルを探す処理をスキップし、この ``VALIDATOR`` オプションは無視されることに注意して下さい。
  キャッシュされた結果を、ここで指定した関数に渡す必要はない。

``DOC``
  キャッシュ変数の ``<VAR>`` のドキュメント文字列を指定する。

``NO_CACHE``
  .. versionadded:: 3.21

  ファイルを探した結果を、キャッシュ変数ではなく通常の変数に格納する。

  .. note::

    このコマンドを呼び出す前に、既にその変数が（通常の変数またはキャッシュ変数として）使用されていたらファイルは探しません。

  .. warning::

    ビルドシステムの作成を繰り返す場合、このオプションによるコストが大幅に増加する可能性があるので、注意して使用する必要があります。

``REQUIRED``
  .. versionadded:: 3.18

  ファイルが見つからなかったらエラー・メッセージを出力してファイルを探す処理を停止する。次回の |FIND_XXX| コマンドは同じ変数を使って呼び出される。

``NO_DEFAULT_PATH`` オプションを指定した場合、追加の検索ディレクトリは使用しません。
``NO_DEFAULT_PATH`` オプションを指定しない場合のファイルを検索する処理は次のステップに従います：

.. |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX_SUBDIR| replace::
   このコマンドが :command:`find_package(<PackageName>)` コマンドでロードした ``find`` モジュールの中から呼び出されている場合は、CMake 変数の :variable:`<PackageName>_ROOT` と環境変数の :envvar:`<PackageName>_ROOT` の ``<prefix>`` を使った |prefix_XXX_SUBDIR|

.. |CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
   CMake 変数の :variable:`CMAKE_PREFIX_PATH` にある ``<prefix>`` を使った |prefix_XXX_SUBDIR|

.. |ENV_CMAKE_PREFIX_PATH_XXX_SUBDIR| replace::
   環境変数の :envvar:`CMAKE_PREFIX_PATH` にある ``<prefix>`` を使った |prefix_XXX_SUBDIR|

.. |SYSTEM_ENVIRONMENT_PREFIX_PATH_XXX_SUBDIR| replace::
   環境変数 ``PATH`` にある ``<prefix>/[s]bin`` を使った |prefix_XXX_SUBDIR| と ``PATH`` の中にある |entry_XXX_SUBDIR|

.. |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR| replace::
   CMake 変数の :variable:`CMAKE_SYSTEM_PREFIX_PATH` にある ``<prefix>`` を使った |prefix_XXX_SUBDIR|

1. このコマンドが ``find`` モジュール、または :command:`find_package(<PackageName>)` コマンドの呼び出しでロードされたスクリプトから呼び出されている場合は、見つかったパッケージ専用のディレクトリを検索する。
   :policy:`CMP0074` のポリシーも参照のこと。

   .. versionadded:: 3.12

   具体的には、次の変数で指定されたディレクトリを順番に検索する：

   a. CMake 変数の :variable:`<PackageName>_ROOT` （``<PackageName>`` は大文字・小文字を区別したパッケージ名）。

   b. CMake 変数の :variable:`<PACKAGENAME>_ROOT` （``<PACKAGENAME>`` は大文字のパッケージ名）。
      :policy:`CMP0144` のポリシーも参照のこと。

      .. versionadded:: 3.27

   c. 環境変数の :envvar:`<PackageName>_ROOT` （``<PackageName>`` は大文字・小文字を区別したパッケージ名）。

   d. 環境変数の :envvar:`<PACKAGENAME>_ROOT` （``<PACKAGENAME>`` は大文字のパッケージ名）。
      :policy:`CMP0144` のポリシーも参照のこと。

      .. versionadded:: 3.27

   パッケージの検索ディレクトリはスタックとして管理しているので、このコマンドがネストされた ``find`` モジュールやパッケージから呼び出された場合、親の ``find`` モジュールや親パッケージからの検索ディレクトリは、現在のモジュールまたはパッケージの検索ディレクトリの後に検索する。
   すなわち、ファイルを探す順番は ``<CurrentPackage>_ROOT``、``ENV{<CurrentPackage>_ROOT}``、``<ParentPackage>_ROOT``、``ENV{<ParentPackage>_ROOT}``、.... になる。
   このステップは、``NO_PACKAGE_ROOT_PATH`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` を ``FALSE`` にセットした時はスキップする。

   * |FIND_PACKAGE_ROOT_PREFIX_PATH_XXX|

2. キャッシュ変数で指定したディレクトリを検索する。
   これは :option:`-DVAR=VALUE <cmake -D>` オプションを指定した :manual:`cmake(1)` コマンドラインでの使用を意図している。
   ``VALUE`` はセミコロンで区切った :ref:`リスト <CMake Language Lists>` として解釈する。
   このステップは、``NO_CMAKE_PATH`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_CMAKE_PATH` を ``FALSE`` にセットした時はスキップする。

   * |CMAKE_PREFIX_PATH_XXX|
   * |CMAKE_XXX_PATH|
   * |CMAKE_XXX_MAC_PATH|

3. CMake 専用の環境変数で指定したディレクトリを検索する。
   これはユーザが導入したシェルスクリプトの中でディレクトリを指定する場合を想定しており、ホストのプラットフォームで有効なパスの区切り文字（Windows 系プラットフォームの場合は ``;``、UNIX 系プラットフォームの場合は ``:``）と使うこと。
   このステップは、``NO_CMAKE_ENVIRONMENT_PATH`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` を ``FALSE`` にセットした時はスキップする。

   * |ENV_CMAKE_PREFIX_PATH_XXX|
   * |ENV_CMAKE_XXX_PATH|
   * |ENV_CMAKE_XXX_MAC_PATH|

4. ``HINTS`` オプションで指定したディレクトリを検索する。
   これらは、既に見つかった別のファイルの場所によって提供されるヒントなど、システムのイントロスペクションで計算されたディレクトリである。
   ``PATHS`` オプションで、ハードコードしたヒントを指定できる。

5. ホストのプラットフォームで標準の環境変数で指定したディレクトリを検索する。
   このステップは、``NO_SYSTEM_ENVIRONMENT_PATH`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` を ``FALSE`` にセットした時はスキップする。

   * |SYSTEM_ENVIRONMENT_PATH_XXX|

   |SYSTEM_ENVIRONMENT_PATH_WINDOWS_XXX|

6. ホストのプラットフォーム・ファイルで定義されている CMake 変数にセットしたディレクトリを検索する。
   ``NO_CMAKE_INSTALL_PREFIX`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` を ``FALSE`` にセットした時は、``CMAKE_INSTALL_PREFIX`` と ``CMAKE_STAGING_PREFIX`` にセットしたディレクトリの検索をスキップする。
   このステップは、``NO_CMAKE_SYSTEM_PATH`` オプションを指定するか、または CMake 変数の :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` を ``FALSE`` にセットした時はスキップする。

   * |CMAKE_SYSTEM_PREFIX_PATH_XXX|
   * |CMAKE_SYSTEM_XXX_PATH|
   * |CMAKE_SYSTEM_XXX_MAC_PATH|

   これらの変数に含まれるディレクトリは、通常はソフトウェアをインストールした場所である。
   たとえば UNIX 系プラットフォームの場合だと ``/usr/local`` である。

7. ``PATHS`` オプションで指定したディレクトリ、またはこのコマンドの短縮形で指定したディレクトリを検索する。
   これらのディレクトリは、通常はハードコードしたヒントに相当する。

CMake 変数の :variable:`CMAKE_IGNORE_PATH`、:variable:`CMAKE_IGNORE_PREFIX_PATH`、:variable:`CMAKE_SYSTEM_IGNORE_PATH`、そして :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` も上記のディレクトリの一部が無視される場合があります。

.. versionadded:: 3.16
  いろいろなディレクトリを無効にするための CMake 変数 ``CMAKE_FIND_USE_<CATEGORY>_PATH`` を追加した。

.. |FIND_ARGS_XXX| replace:: <VAR> NAMES name

macOS 系のプラットフォームの場合、CMake 変数の :variable:`CMAKE_FIND_FRAMEWORK` と :variable:`CMAKE_FIND_APPBUNDLE` を使って Apple 系のパッケージと UNIX 系のパッケージの間にある優先順位を変更できます。

.. include:: FIND_XXX_ROOT.txt
.. include:: FIND_XXX_ORDER.txt

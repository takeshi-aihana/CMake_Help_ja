.. option:: -S <path-to-source>

 CMake プロジェクトの root ディレクトリ（ソースツリー）を指定する。

.. option:: -B <path-to-build>

 CMake がビルドツリーとして使用するディレクトリを指定する。

 もしディレクトリがまだ存在していなかったら、CMake が作成する。

.. option:: -C <initial-cache>

 CMake スクリプトを事前に読み込んでキャッシュにまとめる。

 空っぽのビルドツリーで初めて CMake を実行すると、``CMakeCache.txt`` ファイルを作成し、プロジェクトでカスタマイズ可能な設定がそのファイルの中にキャッシュ（``CACHE`` エントリ）として保存される。
 このオプションで、プロジェクトの ``CMakeLists.txt`` を読む前に、キャッシュとして保存されているエントリを読み込むファイルを指定する。
 ファイルから読み込んだ ``CACHE`` エントリは、プロジェクトのデフォルト値よりも優先度が高い。
 ここで指定するファイルはキャッシュ形式のファイルではなく、``CACHE`` オプションを使う :command:`set` コマンドを含んだ CMake スクリプトにすること。

 CMake スクリプトに含まれる変数 :variable:`CMAKE_SOURCE_DIR` と :variable:`CMAKE_BINARY_DIR` はそれぞれソースツリーとビルドツリーとして扱われる。

.. option:: -D <var>:<type>=<value>, -D <var>=<value>

 CMake の ``CACHE`` エントリを作成、または更新する。

 空っぽのビルドツリーで初めて CMake を実行すると、``CMakeCache.txt`` ファイルを作成し、プロジェクトでカスタマイズ可能な設定がそのファイルの中にキャッシュ（``CACHE`` エントリ）として保存される。
 このオプションで、プロジェクトのデフォルト値よりも優先される設定を指定する。
 このオプションは、必要な数の ``CACHE`` エントリに対して繰り返し指定することができる。

 ``:<type>`` に指定する型は ``CACHE`` エントリに対して :command:`set` コマンドで説明されている型のいずれかにすること。
 ``:<type>`` を省略した場合、型が存在しない ``CACHE`` エントリは型なしで作成される。
 プロジェクトで使っているコマンドが型を ``PATH`` または ``FILEPATH`` に設定すると、``<value>`` は自動的に絶対パスに変換される。

 このオプションは、一個の引数として与えることもできる：
 ``-D<var>:<type>=<value>`` または ``-D<var>=<value>``

 オプション ``-C`` と ``-D`` の順番は重要です。
 これらのオプションは指定した順番で解釈され、後にある引数が前の引数よりも優先されます。
 たとえば、オプション ``-DCMAKE_BUILD_TYPE=Debug`` の後ろに、オプション ``-C`` で、次の CMake スクリプトを呼び出すファイルを引数として指定すると：

 .. code-block:: cmake

   set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)

 オプション ``-C`` が優先され、変数 ``CMAKE_BUILD_TYPE`` には ``Release`` にセットされます。
 一方、オプション ``-D`` が ``-C`` の後ろで指定された場合は ``Debug`` がセットされます。

 もしオプション ``-C`` に渡したファイルの中で、``set(... CACHE ...)`` コマンドに ``FORCE`` を指定せず、オプション ``-D`` で同じ変数を指定した場合は、``-D`` で指定した設定が順番に関係なく優先される（なぜならば ``FORCE`` ではない ``set(... CACHE ...)`` の呼び出しになるので）。

.. option:: -U <globbing_expr>

 CMake が保持している ``CACHE`` から、指定したエントリを削除する。

 このオプションは ``CMakeCache.txt`` ファイルから一個以上の変数を削除しする際に使用する（エントリの指定は ``*`` と ``?`` を使った式の glob 評価をサポートする）。
 このオプションは、必要な数の ``CACHE`` エントリに対して繰り返し指定することができる。 

 お使いの ``CMakeCache.txt`` が役に立たなくなる可能性があるので、使用には注意すること。

.. option:: -G <generator-name>

 ビルドシステムのジェネレータを指定する。

 CMake は特定のプラットフォームにネイティブなビルドシステムを複数サポートしている。
 ジェネレータは特定のビルドシステムを生成する役割を持つ。
 指定できるジェネレータ名はマニュアルの :manual:`cmake-generators(7)` に記載している。

 このオプションを指定しない場合、CMake は環境変数 :envvar:`CMAKE_GENERATOR` をチェックし、それ以外は CMake に組み込まれたデフォルトのジェネレータになる。

.. option:: -T <toolset-spec>

 ジェネレータのツールセット仕様を指定する（ジェネレータがサポートしている場合）

 一部のジェネレータはコンパイラなどのツールチェインの選択についてネイティブのビルドシステムに問い合わせる「ツールセット仕様」をサポートしているものがある。
 詳細は変数 :variable:`CMAKE_GENERATOR_TOOLSET` の説明を参照のこと。

.. option:: -A <platform-name>

 プラットフォーム名を指定する（ジェネレータがサポートしている場合）。

 一部のジェネレータはコンパイラや SDK を選択するためにネイティブのビルドシステムにプラットフォーム名を渡す機能をサポートしているものがある。
 詳細は変数 :variable:`CMAKE_GENERATOR_PLATFORM` の説明を参照のこと。

.. option:: --toolchain <path-to-file>

 クロス・コンパイル用のツールチェイン・ファイルを指定する（これは変数 :variable:`CMAKE_TOOLCHAIN_FILE` を使うことと等価である）。

.. option:: --install-prefix <directory>

 変数 :variable:`CMAKE_INSTALL_PREFIX` で使用するインストール・ディレクトリを指定する。
 絶対パス名にすること。

.. option:: -Wno-dev

 開発者向けの警告（*Warning*）を抑制する。

 これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、警告表示をしないことを意味する。
 このオプションを指定すると、開発者向けの警告の他に非推奨（*deprecated*）の警告も抑制される（デフォルト）。

.. option:: -Wdev

 開発者向けの警告（*Warning*）を抑制しない。

 これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、警告表示を有効にすることを意味する。
 このオプションを指定すると非推奨（*deprecated*）の警告も表示する

.. option:: -Wdeprecated

 非推奨（*deprecated*）な機能についての警告（*Warning*）を抑制しない。

 これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、廃止予定の機能を使用したら警告を表示することを意味する。

.. option:: -Wno-deprecated

 非推奨（*deprecated*）な機能についての警告（*Warning*）を抑制する。

 これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、廃止予定の機能を使用しても警告を表示しないことを意味する。

.. option:: -Werror=<what>

 CMake の警告（*Warning*）をエラーとして扱う。
 ``<what>`` には次のいずれかを指定すること：

 ``dev``
  開発者向けの警告（*Warning*）をエラーにする。

  これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、警告をエラー扱いにすることを意味する。
  このオプションを指定すると、開発者向けの警告の他に非推奨（*deprecated*）の警告もエラーになる（デフォルト）。  

 ``deprecated``
  非推奨（*deprecated*）なマクロと関数の警告（*Warning*）をエラーにする。

  これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、廃止予定のマクロや関数を使用したときの警告をエラーにすることを意味する。

.. option:: -Wno-error=<what>

 CMake の警告（*Warning*）をエラーとして扱わない。
 ``<what>`` には次のいずれかを指定すること：

 ``dev``
  これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、警告をエラー扱いにしないことを意味する。
  このオプションを指定すると、開発者向けの警告の他に非推奨（*deprecated*）の警告もエラーにならない（デフォルト）。

 ``deprecated``
  これは ``CMakeLists.txt`` ファイルを作成した開発者向けのオプションで、廃止予定のマクロや関数を使用したときの警告をエラーにしないことを意味する。

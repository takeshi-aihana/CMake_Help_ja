.. option:: -S <path-to-source>

 CMake プロジェクトの root ディレクトリ（ソースツリー）を指定する。

.. option:: -B <path-to-build>

 CMake がビルド・ツリーとして使用するディレクトリを指定する。

 もしディレクトリがまだ存在していなかったら、CMake が作成する。

.. option:: -C <initial-cache>

 CMake スクリプトを事前にロードしてキャッシュにまとめる。

 空っぽのビルドツリーで初めて CMake を実行すると、``CMakeCache.txt`` ファイルを生成し、プロジェクトでカスタマイズ可能な設定がそのファイルの中にキャッシュ（``CACHE`` エントリ）として保存される。
 このオプションで、プロジェクトの ``CMakeLists.txt`` を読む前に、キャッシュとして保存されているエントリを読み込むファイルを指定する。
 キャッシュから読み込んだエントリは、プロジェクトのデフォルト値よりも優先度が高い。
 ここで指定するファイルはキャッシュ形式のファイルではなく、``CACHE`` オプションを使う :command:`set` コマンドを含んだ CMake スクリプトにすること。

 CMake スクリプトに含まれる変数 :variable:`CMAKE_SOURCE_DIR` と :variable:`CMAKE_BINARY_DIR` はそれぞれソースツリーとビルドツリーとして扱われる。

.. option:: -D <var>:<type>=<value>, -D <var>=<value>

 CMake の ``CACHE`` エントリを作成、または更新する。

 空っぽのビルドツリーで初めて CMake を実行すると、``CMakeCache.txt`` ファイルを生成し、プロジェクトでカスタマイズ可能な設定がそのファイルの中にキャッシュ（``CACHE`` エントリ）として保存される。
 このオプションで、プロジェクトのデフォルト値よりも優先される設定を指定する。
 このオプションは、必要な数の ``CACHE`` エントリに対して繰り返し指定することができる。

 ``:<type>`` に指定する型は ``CACHE`` シグネチャに対して :command:`set` コマンドで説明されている型のいずれかにすること。
 ``:<type>`` を省略した場合、型が存在しない ``CACHE`` エントリは型なしで作成される。
 プロジェクトで使っているコマンドが型を ``PATH`` または ``FILEPATH`` に設定すると、``<value>`` は自動的に絶対パスに変換される。

 このオプションは、This option may also be given as a single argument:
 ``-D<var>:<type>=<value>`` or ``-D<var>=<value>``.

 This option may also be given as a single argument:
 ``-D<var>:<type>=<value>`` or ``-D<var>=<value>``.

 It's important to note that the order of ``-C`` and ``-D`` arguments is
 significant. They will be carried out in the order they are listed, with the
 last argument taking precedence over the previous ones. For example, if you
 specify ``-DCMAKE_BUILD_TYPE=Debug``, followed by a ``-C`` argument with a
 file that calls:

 .. code-block:: cmake

   set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)

 then the ``-C`` argument will take precedence, and ``CMAKE_BUILD_TYPE`` will
 be set to ``Release``. However, if the ``-D`` argument comes after the ``-C``
 argument, it will be set to ``Debug``.

 If a ``set(... CACHE ...)`` call in the ``-C`` file does not use ``FORCE``,
 and a ``-D`` argument sets the same variable, the ``-D`` argument will take
 precedence regardless of order because of the nature of non-``FORCE``
 ``set(... CACHE ...)`` calls.

.. option:: -U <globbing_expr>

 Remove matching entries from CMake ``CACHE``.

 This option may be used to remove one or more variables from the
 ``CMakeCache.txt`` file, globbing expressions using ``*`` and ``?`` are
 supported.  The option may be repeated for as many ``CACHE`` entries as
 desired.

 Use with care, you can make your ``CMakeCache.txt`` non-working.

.. option:: -G <generator-name>

 Specify a build system generator.

 CMake may support multiple native build systems on certain
 platforms.  A generator is responsible for generating a particular
 build system.  Possible generator names are specified in the
 :manual:`cmake-generators(7)` manual.

 If not specified, CMake checks the :envvar:`CMAKE_GENERATOR` environment
 variable and otherwise falls back to a builtin default selection.

.. option:: -T <toolset-spec>

 Toolset specification for the generator, if supported.

 Some CMake generators support a toolset specification to tell
 the native build system how to choose a compiler.  See the
 :variable:`CMAKE_GENERATOR_TOOLSET` variable for details.

.. option:: -A <platform-name>

 Specify platform name if supported by generator.

 Some CMake generators support a platform name to be given to the
 native build system to choose a compiler or SDK.  See the
 :variable:`CMAKE_GENERATOR_PLATFORM` variable for details.

.. option:: --toolchain <path-to-file>

 Specify the cross compiling toolchain file, equivalent to setting
 :variable:`CMAKE_TOOLCHAIN_FILE` variable.

.. option:: --install-prefix <directory>

 Specify the installation directory, used by the
 :variable:`CMAKE_INSTALL_PREFIX` variable. Must be an absolute path.

.. option:: -Wno-dev

 Suppress developer warnings.

 Suppress warnings that are meant for the author of the
 ``CMakeLists.txt`` files. By default this will also turn off
 deprecation warnings.

.. option:: -Wdev

 Enable developer warnings.

 Enable warnings that are meant for the author of the ``CMakeLists.txt``
 files. By default this will also turn on deprecation warnings.

.. option:: -Wdeprecated

 Enable deprecated functionality warnings.

 Enable warnings for usage of deprecated functionality, that are meant
 for the author of the ``CMakeLists.txt`` files.

.. option:: -Wno-deprecated

 Suppress deprecated functionality warnings.

 Suppress warnings for usage of deprecated functionality, that are meant
 for the author of the ``CMakeLists.txt`` files.

.. option:: -Werror=<what>

 Treat CMake warnings as errors. ``<what>`` must be one of the following:

 ``dev``
   Make developer warnings errors.

   Make warnings that are meant for the author of the ``CMakeLists.txt`` files
   errors. By default this will also turn on deprecated warnings as errors.

 ``deprecated``
  Make deprecated macro and function warnings errors.

  Make warnings for usage of deprecated macros and functions, that are meant
  for the author of the ``CMakeLists.txt`` files, errors.

.. option:: -Wno-error=<what>

 Do not treat CMake warnings as errors. ``<what>`` must be one of the following:

 ``dev``
  Make warnings that are meant for the author of the ``CMakeLists.txt`` files not
  errors. By default this will also turn off deprecated warnings as errors.

 ``deprecated``
  Make warnings for usage of deprecated macros and functions, that are meant
  for the author of the ``CMakeLists.txt`` files, not errors.
